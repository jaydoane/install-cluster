---
# first and last nodes of cluster perform special tasks based on the
# host variables is_first_node and is_last_node
- hosts: db
  gather_facts: no
  vars:
    erl_call: '{{ bin_dir }}/erl_call_cloudant'
  environment:
    PATH: '{{ ansible_env.PATH }}:{{ venv_bin_dir }}'
  tasks:
    # the first node is configured using the dbnode.yaml template
    # while subsequent nodes use the first node's exported cluster_dbnode.yaml 
    - template: src=src/dbnode.yaml dest={{ config_dir }}/
      when: is_first_node
    - set_fact: config_path={{ config_dir }}/dbnode.yaml
      when: is_first_node
    - set_fact: config_path={{ cluster_config_path }}
      when: not is_first_node
    - debug: var=config_path
    - command: cast system install -db -c {{ config_path }}
               creates=/opt/cloudant/lib
    - name: export cluster config for other db nodes
      command: cast cluster export {{ cluster_config_path }}
      when: is_first_node

    # common to all db nodes
    - lineinfile: line="alias tl='tail -f /var/log/cloudant/cloudant.log'"
                  dest=/root/.bashrc
    - lineinfile: line="alias tlc='tail -f /var/log/cloudant/cloudant-svlogd/current'"
                  dest=/root/.bashrc
    - command: '{{ erl_call }} -a "config set [\"log\", \"level\", \"notice\"]"'

    # unfortunately, currently only -h exits with rc 0
    - name: ensure weatherreport works
      shell: PATH=$PATH:/opt/cloudant/bin weatherreport -h

    # only perform tasks below on the last node
    - block:
        - command: cast cluster add {{ item.fqdn }}
          with_items: '{{ db_nodes }}'

        - shell: cast --version | cut -d' ' -f3
          register: cast_version
        - set_fact: cast_flag=''
          when: '{{ cast_version.stdout == "2.0.0" }}'
        - set_fact: cast_flag='-y'
          when: '{{ cast_version.stdout != "2.0.0" }}'

        - command: cast database init {{ cast_flag }} --password {{ admins[0].pass }}
          # non-admin secondary user for testy
        - template: src=src/create-testy-user2.sh dest={{ config_dir }}/ mode=0755
        - command: '{{ config_dir }}/create-testy-user2.sh'
        - local_action: file path={{playbook_dir}}/../cluster_dbnode.yaml state=absent
          when: not "{{ lookup('env','USER') }}" == 'jenkins'

        - command: '{{ erl_call }} -a "mem3 nodes"'
          register: mem3_nodes
        - fail: msg='db nodes are not clustered'
          when: '{{ mem3_nodes.stdout.split(",") | length }} != {{ db_nodes | length}}'
      when: is_last_node
